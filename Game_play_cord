import pygame
import sys

pygame.init()

width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("집사를 찾아서")

white = (255, 255, 255)
black = (0, 0, 0)

# 장애물 설정
obstacle_width, obstacle_height = 50, 50
obstacle_speed = 5
obstacle_interval = 2000
obstacle_timer = pygame.time.get_ticks()
obstacles = []  # 여러 장애물 저장

# 캐릭터 설정
character_width, character_height = 50, 50
character_x, character_y = width // 2 - character_width // 2, height // 2 - character_height // 2

#점프
character_jump = False
f_jump = False
default_count = 10
jump_count = default_count

# 체력 설정
Heart = 3

# 무적 상태 설정
invincible_duration = 1000
invincible_timer = 0
is_invincible = False

# 반짝임 설정
blink_duration = 1000
blink_timer = 0
is_blinking = False

font = pygame.font.Font(None, 36)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    keys = pygame.key.get_pressed()

    #캐릭터 F점프
    if keys[pygame.K_f] and not character_jump:
        character_jump = True
        f_jump = True

    if (character_jump == True):
    #f 눌렀을때 점프 스타일
        if (f_jump == True):
            if jump_count >= -default_count and jump_count < 0:
                character_y += (jump_count ** 2) * 0.5
                jump_count -= 1
            
            elif jump_count >= 0 :
                character_y -= (jump_count ** 2) * 0.5
                jump_count -= 1
            
            else:
                character_jump = False
                f_jump = False
                jump_count = default_count

    # 새로운 장애물을 생성할 시간인지 확인
    current_time = pygame.time.get_ticks()
    if current_time - obstacle_timer > obstacle_interval:
        obstacle_x = width
        obstacle_y = height // 2 - obstacle_height // 2
        obstacles.append((obstacle_x, obstacle_y))
        obstacle_timer = current_time

    # 장애물 위치 업데이트
    for i in range(len(obstacles)):
        obstacles[i] = (obstacles[i][0] - obstacle_speed, obstacles[i][1])

    # 화면에서 벗어난 장애물 제거
    obstacles = [obs for obs in obstacles if obs[0] + obstacle_width > 0]
    '''
    obs는 obstacles 리스트의 각 요소를 나타냅니다.
    obs[0]는 장애물의 x 좌표를 나타냅니다.
    obstacle_width는 장애물의 가로 길이를 나타냅니다.
    따라서 obs[0] + obstacle_width는 장애물의 오른쪽 끝 부분의 x 좌표를 나타냅니다
    '''
    # 무적 업데이트
    if is_invincible and current_time - invincible_timer > invincible_duration:
        is_invincible = False
    
    # 반짝임 업데이트
    if is_blinking and current_time - blink_timer > blink_duration:
        is_blinking = False

    # 장애물과 충돌 확인
    for obstacle in obstacles:
        obstacle_rect = pygame.Rect(obstacle[0], obstacle[1], obstacle_width, obstacle_height)
        character_rect = pygame.Rect(character_x, character_y, character_width, character_height)

        if character_rect.colliderect(obstacle_rect):
            if not is_invincible:
                Heart -= 1
                is_invincible = True
                invincible_timer = current_time
                is_blinking = True
                blink_timer = current_time
            elif Heart <= 0:
                # 체력이 0이면 캐릭터를 화면 밖으로 이동(캐릭터 사라짐)
                character_x = -100

    # 화면 지우기
    screen.fill(white)

    # 장애물 그리기
    for obstacle in obstacles:
        pygame.draw.rect(screen, (255, 0, 0), (*obstacle, obstacle_width, obstacle_height))

    # 캐릭터 그리기
    if not is_blinking or (is_blinking and current_time % 200 < 100):
        pygame.draw.rect(screen, (0, 0, 255), (character_x, character_y, character_width, character_height))

    # 체력 표시
    stamina_text = font.render(f"Heart: {Heart}", True, black)
    screen.blit(stamina_text, (width - 150, 20))

    # 무적 표시
    if is_invincible:
        invincible_text = font.render("Invincible!", True, black)
        screen.blit(invincible_text, (width - 150, 60))

    # 화면 업데이트
    pygame.display.flip()

    # 프레임 속도 조절
    pygame.time.Clock().tick(30)
